// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pullping.proto

package pullping

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PullRequest struct {
	Images []string `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (m *PullRequest) Reset()      { *m = PullRequest{} }
func (*PullRequest) ProtoMessage() {}
func (*PullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64ad22311ddb8457, []int{0}
}
func (m *PullRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRequest.Merge(m, src)
}
func (m *PullRequest) XXX_Size() int {
	return m.Size()
}
func (m *PullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullRequest proto.InternalMessageInfo

func (m *PullRequest) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

type PullResponse struct {
}

func (m *PullResponse) Reset()      { *m = PullResponse{} }
func (*PullResponse) ProtoMessage() {}
func (*PullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64ad22311ddb8457, []int{1}
}
func (m *PullResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PullResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullResponse.Merge(m, src)
}
func (m *PullResponse) XXX_Size() int {
	return m.Size()
}
func (m *PullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PullRequest)(nil), "moby.pullping.v1.PullRequest")
	proto.RegisterType((*PullResponse)(nil), "moby.pullping.v1.PullResponse")
}

func init() { proto.RegisterFile("pullping.proto", fileDescriptor_64ad22311ddb8457) }

var fileDescriptor_64ad22311ddb8457 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x28, 0xcd, 0xc9,
	0x29, 0xc8, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xc8, 0xcd, 0x4f, 0xaa,
	0xd4, 0x83, 0x0b, 0x96, 0x19, 0x2a, 0xa9, 0x72, 0x71, 0x07, 0x94, 0xe6, 0xe4, 0x04, 0xa5, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x08, 0x89, 0x71, 0xb1, 0x65, 0xe6, 0x26, 0xa6, 0xa7, 0x16, 0x4b, 0x30,
	0x2a, 0x30, 0x6b, 0x70, 0x06, 0x41, 0x79, 0x4a, 0x7c, 0x5c, 0x3c, 0x10, 0x65, 0xc5, 0x05, 0xf9,
	0x79, 0xc5, 0xa9, 0x46, 0xc1, 0x5c, 0x1c, 0x20, 0x7e, 0x40, 0x66, 0x5e, 0xba, 0x90, 0x3b, 0x17,
	0x0b, 0x88, 0x2d, 0x24, 0xab, 0x87, 0x6e, 0xba, 0x1e, 0x92, 0xd1, 0x52, 0x72, 0xb8, 0xa4, 0x21,
	0x46, 0x1a, 0x30, 0x3a, 0xd9, 0x5d, 0x78, 0x28, 0xc7, 0x70, 0xe3, 0xa1, 0x1c, 0xc3, 0x87, 0x87,
	0x72, 0x8c, 0x0d, 0x8f, 0xe4, 0x18, 0x57, 0x3c, 0x92, 0x63, 0x3c, 0xf1, 0x48, 0x8e, 0xf1, 0xc2,
	0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x5f, 0x3c, 0x92, 0x63, 0xf8, 0xf0, 0x48, 0x8e, 0x71,
	0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xe2, 0x80, 0x99,
	0x98, 0xc4, 0x06, 0xf6, 0xa4, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xaf, 0x87, 0xf2, 0xf6,
	0x00, 0x00, 0x00,
}

func (this *PullRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PullRequest)
	if !ok {
		that2, ok := that.(PullRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if this.Images[i] != that1.Images[i] {
			return false
		}
	}
	return true
}
func (this *PullResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PullResponse)
	if !ok {
		that2, ok := that.(PullResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PullRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pullping.PullRequest{")
	s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PullResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pullping.PullResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPullping(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PullPingClient is the client API for PullPing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PullPingClient interface {
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (PullPing_PullClient, error)
}

type pullPingClient struct {
	cc *grpc.ClientConn
}

func NewPullPingClient(cc *grpc.ClientConn) PullPingClient {
	return &pullPingClient{cc}
}

func (c *pullPingClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (PullPing_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PullPing_serviceDesc.Streams[0], "/moby.pullping.v1.PullPing/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &pullPingPullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PullPing_PullClient interface {
	Recv() (*PullResponse, error)
	grpc.ClientStream
}

type pullPingPullClient struct {
	grpc.ClientStream
}

func (x *pullPingPullClient) Recv() (*PullResponse, error) {
	m := new(PullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PullPingServer is the server API for PullPing service.
type PullPingServer interface {
	Pull(*PullRequest, PullPing_PullServer) error
}

// UnimplementedPullPingServer can be embedded to have forward compatible implementations.
type UnimplementedPullPingServer struct {
}

func (*UnimplementedPullPingServer) Pull(req *PullRequest, srv PullPing_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}

func RegisterPullPingServer(s *grpc.Server, srv PullPingServer) {
	s.RegisterService(&_PullPing_serviceDesc, srv)
}

func _PullPing_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PullPingServer).Pull(m, &pullPingPullServer{stream})
}

type PullPing_PullServer interface {
	Send(*PullResponse) error
	grpc.ServerStream
}

type pullPingPullServer struct {
	grpc.ServerStream
}

func (x *pullPingPullServer) Send(m *PullResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PullPing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moby.pullping.v1.PullPing",
	HandlerType: (*PullPingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _PullPing_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pullping.proto",
}

func (m *PullRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Images[iNdEx])
			copy(dAtA[i:], m.Images[iNdEx])
			i = encodeVarintPullping(dAtA, i, uint64(len(m.Images[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PullResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PullResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PullResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPullping(dAtA []byte, offset int, v uint64) int {
	offset -= sovPullping(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PullRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovPullping(uint64(l))
		}
	}
	return n
}

func (m *PullResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPullping(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPullping(x uint64) (n int) {
	return sovPullping(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PullRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PullRequest{`,
		`Images:` + fmt.Sprintf("%v", this.Images) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PullResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PullResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPullping(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PullRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPullping
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPullping
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPullping
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPullping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPullping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PullResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPullping
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PullResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PullResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPullping(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPullping
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPullping(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPullping
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPullping
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPullping
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPullping
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPullping
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPullping
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPullping        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPullping          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPullping = fmt.Errorf("proto: unexpected end of group")
)
