name: dockerfile-frontend

on:
  push:
    branches:
      - 'github-actions' # remove when merged to master
      - 'master'
      - 'v*'
    tags:
      - 'dockerfile/*'
  pull_request:
    branches:
      - 'github-actions' # remove when merged to master
      - 'master'
      - 'v*'

env:
  BUILDKIT_VERSION: "v0.7.0-rc1"
  DF_REPO_SLUG_TARGET: "docker/dockerfile-upstream"
  PLATFORMS: "linux/amd64,linux/arm/v7,linux/arm64,linux/s390x,linux/ppc64le"

jobs:
  docker-image:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          -
            channel: "mainline"
            buildtags: ""
          -
            channel: "experimental"
            buildtags: "dfrunsecurity dfrunnetwork"
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Prepare
        id: prep
        run: |
          VERSION=local
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          elif [[ $GITHUB_REF == refs/tags/dockerfile/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/dockerfile/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          fi
          if [ "${{ matrix.channel }}" != "mainline" ]; then
            MAIN_TAG=${{ matrix.channel }}
            TAGS="${DF_REPO_SLUG_TARGET}:${VERSION}-${{ matrix.channel }}"
          else
            MAIN_TAG=latest
            TAGS="${DF_REPO_SLUG_TARGET}:${VERSION}"
          fi
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3} ]]; then
            if [ "${{ matrix.channel }}" != "mainline" ]; then
              TAGS="$TAGS,${DF_REPO_SLUG_TARGET}:${{ matrix.channel }}"
            else
              MINOR=${VERSION%.*}
              MAJOR=${MINOR%.*}
              TAGS="$TAGS,${DF_REPO_SLUG_TARGET}:${MINOR},${DF_REPO_SLUG_TARGET}:${MAJOR},${DF_REPO_SLUG_TARGET}:latest"
            fi
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=platforms::${PLATFORMS}
          echo ::set-output name=main_tag::${MAIN_TAG}
      -
        name: Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./frontend/dockerfile/cmd/dockerfile-frontend/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          cache-from: type=registry,ref=${{ env.DF_REPO_SLUG_TARGET }}:${{ steps.prep.outputs.main_tag }}
          #cache-to: type=inline
          tags: ${{ steps.prep.outputs.tags }}
          build-args: |
            CHANNEL=${{ matrix.channel }}
            BUILDTAGS=${{ matrix.buildtags }}
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
      -
        name: Check manifest
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
        run: |
          docker buildx imagetools inspect ${{ env.DF_REPO_SLUG_TARGET }}:${{ steps.prep.outputs.main_tag }}
      -
        name: Inspect image
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
        run: |
          docker pull ${{ env.DF_REPO_SLUG_TARGET }}:${{ steps.prep.outputs.main_tag }}
          docker image inspect ${{ env.DF_REPO_SLUG_TARGET }}:${{ steps.prep.outputs.main_tag }}
      -
        name: Dump context
        if: always()
        uses: crazy-max/ghaction-dump-context@v1
